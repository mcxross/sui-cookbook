<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Getting Started" id="getting-started" help-id="Getting Started">
    <show-structure for="tab,chapter,procedure" depth="2"/>
    <p>
        In this chapter, we'll see how to install Sui binaries and how to add Sui client libraries
        as dependencies. Let's start with installing Sui binaries.
    </p>
    <chapter title="Sui Installation" id="sui-node-installation">
        <p>
            Installing Sui for development is very easy with package managers. In your OS' terminal or shell, run the
            appropriate command as shown below:
        </p>
        <tabs>
            <tab title="MacOS" id="macos">
                <code-block lang="Shell">
                    brew install sui
                </code-block>
            </tab>
            <tab title="Linux" id="linux">
                <code-block lang="Shell">
                    brew install sui
                </code-block>
            </tab>
            <tab title="Windows" id="windows">
                <code-block lang="Shell">
                    choco install sui
                </code-block>
            </tab>
        </tabs>
    </chapter>

    <p>
        In order to interact with Sui, we need a client. If you've run either of the above
        commands, you have a binary client installed that you can confirm by running <code>sui --version</code>
        in you terminal or shell. If successful, this should display the version of Sui installed.
    </p>

    <p>
        To integrate the client as a library into your project, follow the instructions below:
    </p>

    <chapter title="Client Library Installation" id="client-library-installation">
        <p>
            The client libraries are available for various platforms. Ranging from specific platform
            libraries to multiplatform libraries. Follow the instructions below:
        </p>
        <tabs>
            <tab id="generic-install" title="Generic">
        <code-block lang="kotlin">
           implementation("xyz.mcxross.ksui:&lt;ksui-[platform]&gt;:&lt;$ksui_version&gt;")
        </code-block>
            </tab>
            <tab id="multiplatform-install" title="Multiplatform">
                <p>
                    If you have a Kotlin Multiplaform project, add the following dependency to your projects' common
                    sourceSet:
                </p>
                <br/>
                <code-block lang="kotlin">
                    implementation("xyz.mcxross.ksui:ksui:&lt;$ksui_version&gt;")
                </code-block>
            </tab>
            <tab id="android-install" title="Android">
                <p>
                    For a purely Android project, add the following as a dependency:
                </p>
                <br/>
                <code-block lang="kotlin">
                    implementation("xyz.mcxross.ksui:ksui-android:&lt;$ksui_version&gt;")
                </code-block>
            </tab>
            <tab id="jvm-install" title="JVM">
                <p>
                    For a JVM projects, add the following as a dependency:
                </p>
                <code-block lang="kotlin">
                    implementation("xyz.mcxross.ksui:ksui-jvm:&lt;$ksui_version&gt;")
                </code-block>
            </tab>
        </tabs>
    </chapter>

    <chapter title="Sui Client" id="sui-client">
        <p>
            Once you've successfully added the dependencies, create a <code>Sui</code> instance as showed below:
        </p>
        <link-summary>val sui = Sui()</link-summary>
        <code-block lang="kotlin">
            val sui = Sui()
        </code-block>
        This serves as the main entry point for the client. By default, it connects to the
        <tooltip term="Mainnet"><code>mainnet</code></tooltip>
        network. However, you can customize the network configuration as follows:
        <code-block lang="Kotlin">
            val config = SuiConfig(SuiSettings(network = Network.TESTNET))
            val sui = Sui(config)
        </code-block>

        You can also set other things like <code>connectAttempts</code>,
        <code>retryOnServerErrors</code>, <code>proxy</code>, and much more:

        <code-block lang="Kotlin">
            val settings = SuiSettings(clientConfig = ClientConfig(maxRetries = 5))
            val sui = Sui(SuiConfig(settings))
        </code-block>

        <note>
        Certain configurations apply universally across all supported platforms, while others are specific to individual
        platforms. For detailed information, refer to the  <a href="https://mcxross.github.io/ksui/">reference</a>.
        </note>

        The client created is by default what the SDK uses for object resolution during PTB construction.
        This means you don't need to pass the client explicitly when constructing a PTB.
        However, if you want to use a different client, you can pass it as an argument
        to the <code>PTB</code> constructor like this:
        <code-block lang="kotlin">
                val ptb = ptb(sui = sui) {... }
        </code-block>

        For Builder Style, you can do it like this:
        <code-block lang="kotlin">
        val builder = ProgrammableTransactionBuilder()

        builder.moveCall(FUNCTION_ID, args = listOf(builder.pure(0UL)))

        builder.build(sui = sui)
        </code-block>

        Details about building transaction can be found in the
        <a href="Transactions.md"/> topic.
        <p>
            Our client is now ready for use. We can now call the various available methods on this <a href="getting-started.topic#sui-client"><code>sui</code></a>
            object.
        </p>
    </chapter>

</topic>